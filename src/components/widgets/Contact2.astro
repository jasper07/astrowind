---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { Contact as Props } from '~/types';

const { id, isDark = false, classes = {}, bg = await Astro.slots.render('bg') } = Astro.props;
---

<!-- ====== Contact Start ====== -->
<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-5xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Fragment slot="bg">
    <div class="absolute inset-0 bg-blue-50 dark:bg-transparent lg:h-[45%] xl:h-1/2"></div>
  </Fragment>
  <div class="mx-auto max-w-7xl p-4 md:px-8">
    <div class={`flex flex-col gap-8 md:gap-12 md:flex-row`}>
      <div class="md:basis-1/2 self-center">
        <div class="ud-contact-content-wrapper">
          <div class="ud-contact-title mb-12 lg:mb-[150px]">
            <span class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase"> CONTACT US </span>
            <h2 class="max-w-[260px] text-[35px] leading-[1.14] font-semibold text-dark dark:text-white">
              Let's talk about your problems.
            </h2>
          </div>
          <div class="mb-12 flex flex-wrap justify-between lg:mb-0">
            <div class="mb-8 flex w-[330px] max-w-full">
              <div class="mr-6 text-[32px] text-primary">
                <svg width="34" height="25" viewBox="0 0 34 25" class="fill-current">
                  <path
                    d="M30.5156 0.960938H3.17188C1.42188 0.960938 0 2.38281 0 4.13281V20.9219C0 22.6719 1.42188 24.0938 3.17188 24.0938H30.5156C32.2656 24.0938 33.6875 22.6719 33.6875 20.9219V4.13281C33.6875 2.38281 32.2656 0.960938 30.5156 0.960938ZM30.5156 2.875C30.7891 2.875 31.0078 2.92969 31.2266 3.09375L17.6094 11.3516C17.1172 11.625 16.5703 11.625 16.0781 11.3516L2.46094 3.09375C2.67969 2.98438 2.89844 2.875 3.17188 2.875H30.5156ZM30.5156 22.125H3.17188C2.51562 22.125 1.91406 21.5781 1.91406 20.8672V5.00781L15.0391 12.9922C15.5859 13.3203 16.1875 13.4844 16.7891 13.4844C17.3906 13.4844 17.9922 13.3203 18.5391 12.9922L31.6641 5.00781V20.8672C31.7734 21.5781 31.1719 22.125 30.5156 22.125Z"
                  ></path>
                </svg>
              </div>
              <div>
                <p class="mb-[18px] text-lg font-semibold text-dark dark:text-white">How Can We Help?</p>
                <p class="text-base text-body-color dark:text-dark-6">
                  <p class="text-base text-body-color dark:text-dark-6">
                    <span class="email">
                      <span class="name">info</span><span class="at">@</span><span class="domain"
                        >secondphase.com.au</span
                      >
                    </span>
                  </p>
                </p>
                <p class="text-base text-body-color dark:text-dark-6">
                  <p class="text-base text-body-color dark:text-dark-6">
                    <span class="email">
                      <span class="name">contact</span><span class="at">@</span><span class="domain"
                        >secondphase.com.au</span>
                    </span>
                  </p>
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
      <!-- <div class="w-full px-4 lg:w-5/12 xl:w-5/12" > -->
      <div  class="mt-10 md:mt-0 md:basis-1/2">
        <div
          class="rounded-lg shadow-[0_4px_30px_rgba(0,0,0,0.1)] dark:shadow-[0_4px_30px_rgba(0,0,0,0.1)] backdrop-blur border border-[#ffffff29] bg-white dark:bg-slate-900 p-6"
        >
          <h3 class="mb-8 text-2xl font-semibold md:text-[28px] md:leading-[1.42] text-dark dark:text-white">
            Send us a Message
          </h3>
          <form id="contactForm">
            <div class="mb-[22px]">
              <label for="fullName" class="block text-sm text-body-color dark:text-dark-6 mb-4">Full Name*</label>
              <input
                type="text"
                name="name"
                placeholder="enter your name"
                class="bg-transparent w-full text-body-color dark:text-dark-6 placeholder:text-body-color/60 border-0 border-b border-[#f1f1f1] dark:border-dark-3 pb-3 focus:border-primary focus:outline-none"
              />
            </div>
            <div class="mb-[22px]">
              <label for="email" class="block text-sm text-body-color dark:text-dark-6 mb-4">Email*</label>
              <input
                type="email"
                name="email"
                placeholder="enter@yourmail.com"
                class="bg-transparent w-full text-body-color dark:text-dark-6 placeholder:text-body-color/60 border-0 border-b border-[#f1f1f1] dark:border-dark-3 pb-3 focus:border-primary focus:outline-none"
              />
            </div>
            <div class="mb-[22px]">
              <label for="company" class="block text-sm text-body-color dark:text-dark-6 mb-4">Company Name*</label>
              <input
                type="text"
                name="company"
                placeholder="enter company"
                class="bg-transparent w-full text-body-color dark:text-dark-6 placeholder:text-body-color/60 border-0 border-b border-[#f1f1f1] dark:border-dark-3 pb-3 focus:border-primary focus:outline-none"
              />
            </div>
            <div class="mb-[30px]">
              <label for="message" class="block text-sm text-body-color dark:text-dark-6 mb-4">Message*</label>
              <textarea
                name="message"
                rows="3"
                placeholder="write a short description"
                class="bg-transparent w-full text-body-color dark:text-dark-6 placeholder:text-body-color/60 resize-none border-0 border-b border-[#f1f1f1] dark:border-dark-3 pb-3 focus:border-primary focus:outline-none"
              ></textarea>
            </div>
            <div class="mb-0">
              <button
                type="submit"
                class="inline-flex items-center justify-center rounded-md bg-primary py-3 px-10 text-base font-medium text-white transition duration-300 ease-in-out hover:bg-blue-dark"
              >
                Send
              </button>
            </div>
          </form>
        </div>
            <!-- Alert Container -->
            <div id="alertContainer" class="hidden mb-4 pt-4"> <!-- Add pt-4 for padding-top -->
              <div id="alert" role="alert" class="relative flex w-full p-3 text-sm text-white rounded-md">
                <span id="alertMessage">This is an alert message.</span>
                <button class="flex items-center justify-center transition-all w-8 h-8 rounded-md text-white hover:bg-white/10 active:bg-white/10 absolute top-1.5 right-1.5" type="button" onclick="closeAlert()">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="h-5 w-5" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              </div>
            </div>
      </div>
    </div>
  </div>




  <!-- </section> -->
</WidgetWrapper>
<!-- ====== Contact End ====== -->

<script is:inline>
  (() => {
    let form, submitButton, alertContainer, alert, alertMessage;

    const initializeFormElements = () => {
      form = document.getElementById('contactForm');
      submitButton = form.querySelector('button[type="submit"]');
      alertContainer = document.getElementById('alertContainer');
      alert = document.getElementById('alert');
      alertMessage = document.getElementById('alertMessage');
    };

    const handleSubmit = async (event) => {
      event.preventDefault();

      if (!validateForm()) {
        showAlert('error', 'Please fill out all required fields.');
        return;
      }

      await submitForm();
    };

    const validateForm = () => {
      const inputs = form.querySelectorAll('input, textarea');
      let allFilled = true;

      inputs.forEach((input) => {
        if (!input.value) {
          allFilled = false;
          input.classList.add('border-red-500');
        } else {
          input.classList.remove('border-red-500');
        }
      });

      return allFilled;
    };

    const submitForm = async () => {
      disableSubmitButton(true);
      
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());
      const functionUrl = getFunctionUrl();

      try {
        const response = await fetch(functionUrl, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ data }),
        });

        if (response.ok) {
          showAlert('success', 'Your message has been sent successfully!');
          form.reset();
        } else {
          throw new Error('Failed to send message');
        }
      } catch (error) {
        console.error('Error:', error);
        showAlert('error', 'An error occurred while sending your message.');
      } finally {
        disableSubmitButton(false);
      }
    };

    const getFunctionUrl = () => {
      const isLocalDevelopment = window.location.hostname === 'localhost' && window.location.port === '4321';
      const baseUrl = isLocalDevelopment ? 'http://localhost:5001/secondphase-b73a4/us-central1' : '';
      return `${baseUrl}/submitContactForm`;
    };

    const disableSubmitButton = (disable) => {
      submitButton.disabled = disable;
      submitButton.textContent = disable ? 'Sending...' : 'Send';
    };

    const showAlert = (type, message) => {
      alertMessage.textContent = message;
      
      if (type === 'success') {
        alert.classList.add('bg-green-600');
        alert.classList.remove('bg-red-600');
      } else if (type === 'error') {
        alert.classList.add('bg-red-600');
        alert.classList.remove('bg-green-600');
      }

      alertContainer.classList.remove('hidden');
      setTimeout(closeAlert, 5000);
    };

    const closeAlert = () => {
      alertContainer.classList.add('hidden');
    };

    const setupFormHandler = () => {
      if (form) {
        form.removeEventListener('submit', handleSubmit);
        form.addEventListener('submit', handleSubmit);
      } else {
        console.error('Contact form not found in the DOM');
      }
    };

    // Initialize on first load
    initializeFormElements();
    setupFormHandler();

    // Re-initialize on each Astro page load
    document.addEventListener('astro:page-load', () => {
      initializeFormElements();
      setupFormHandler();
    });

  })();
</script>